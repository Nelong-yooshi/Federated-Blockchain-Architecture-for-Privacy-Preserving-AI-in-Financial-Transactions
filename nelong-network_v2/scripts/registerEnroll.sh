#!/usr/bin/env bash

function createOrderer() {
  local FILE_PATH="${NODE_PATH}/${DOMAIN_NAME}.com"
  local CA_NAME="ca-${ORG_NAME,,}"
  infoln "Enrolling the CA admin"
  mkdir -p ${FILE_PATH}

  export FABRIC_CA_CLIENT_HOME=${FILE_PATH}

  # set -x
  
  fabric-ca-client enroll -u https://${CA_ID}:${CA_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: orderer" > "${FILE_PATH}/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${FILE_PATH}/msp/tlscacerts"
  cp "${ORG_PATH}/ca-cert.pem" "${FILE_PATH}/msp/tlscacerts/tlsca.${DOMAIN_NAME}.com-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${FILE_PATH}/tlsca"
  cp "${ORG_PATH}/ca-cert.pem" "${FILE_PATH}/tlsca/tlsca.${DOMAIN_NAME}.com-cert.pem"

  infoln "Registering ${ORG_NAME,,}"
  # set -x
  fabric-ca-client register --caname ${CA_NAME} --id.name ${REGISTER_ID} --id.secret ${REGISTER_PW} --id.type orderer --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  # Register and generate artifacts for the orderer admin
  infoln "Registering the orderer admin"
  # set -x
  fabric-ca-client register --caname ${CA_NAME} --id.name ${REGISTER_ADMIN_ID} --id.secret ${REGISTER_ADMIN_PW} --id.type admin --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  infoln "Generating the admin msp"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ADMIN_ID}:${REGISTER_ADMIN_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${ADMIN_PATH}/msp" --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  cp "${FILE_PATH}/msp/config.yaml" "${ADMIN_PATH}/msp/config.yaml"


  infoln "Generating the ${ORG_NAME,,} MSP"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ID}:${REGISTER_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/msp" --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  cp "${FILE_PATH}/msp/config.yaml" "${NODE_PATH}/${DOMAIN_NAME}.com/${ORG_NAME,,}.${DOMAIN_NAME}.com/msp/config.yaml"
  # Workaround: Rename the signcert file to ensure consistency with Cryptogen generated artifacts
  mv "${FILE_PATH}/msp/signcerts/cert.pem" "${FILE_PATH}/msp/signcerts/${ORG_NAME,,}.${DOMAIN_NAME}.com-cert.pem"

  infoln "Generating the ${ORG_NAME,,} TLS certificates, use --csr.hosts to specify Subject Alternative Names"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ID}:${REGISTER_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls" --enrollment.profile tls --csr.hosts ${ORG_NAME,,}.${DOMAIN_NAME}.com --csr.hosts localhost --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/tlscacerts/"* "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/ca.crt"
  cp "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/signcerts/"* "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/server.crt"
  cp "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/keystore/"* "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/server.key"

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/msp/tlscacerts"
  cp "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/tlscacerts/"* "${FILE_PATH}/${ORG_NAME,,}.${DOMAIN_NAME}.com/msp/tlscacerts/tlsca.${DOMAIN_NAME}.com-cert.pem"
}


function createOrg() {
  local CA_NAME="ca-${ORG_NAME,,}"
  local FILE_PATH="${NODE_PATH}/${DOMAIN_NAME}.com"

  infoln "Enrolling the CA admin"
  mkdir -p ${FILE_PATH}

  export FABRIC_CA_CLIENT_HOME=${FILE_PATH}
  # set -x
  fabric-ca-client enroll -u https://${CA_ID}:${CA_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-${CA_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-${CA_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-${CA_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${FABRIC_CA_SERVER_PORT}-${CA_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${FILE_PATH}/msp/config.yaml"

  mkdir -p "${FILE_PATH}/msp/tlscacerts"
  cp "${ORG_PATH}/ca-cert.pem" "${FILE_PATH}/msp/tlscacerts/ca.crt"

  mkdir -p "${FILE_PATH}/tlsca"
  cp "${ORG_PATH}/ca-cert.pem" "${FILE_PATH}/tlsca/tlsca.${DOMAIN_NAME}.com-cert.pem"

  mkdir -p "${FILE_PATH}/ca"
  cp "${ORG_PATH}/ca-cert.pem" "${FILE_PATH}/ca/ca.${DOMAIN_NAME}.com-cert.pem"

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ${CA_NAME} --id.name ${REGISTER_ID} --id.secret ${REGISTER_PW} --id.type peer --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering user"
  # set -x
  fabric-ca-client register --caname ${CA_NAME} --id.name ${REGISTER_USER_ID} --id.secret ${REGISTER_USER_PW} --id.type client --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  infoln "Registering admin"
  # set -x
  fabric-ca-client register --caname ${CA_NAME} --id.name ${REGISTER_ADMIN_ID} --id.secret ${REGISTER_ADMIN_PW} --id.type admin --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  infoln "Generating the peer0 MSP"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ID}:${REGISTER_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/msp" --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  cp "${FILE_PATH}/msp/config.yaml" "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/msp/config.yaml"

  infoln "Generating the peer0 TLS certs"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ID}:${REGISTER_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls" --enrollment.profile tls --csr.hosts peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com --csr.hosts localhost --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  cp "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/tlscacerts/"* "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/ca.crt"
  cp "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/signcerts/"* "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/server.crt"
  cp "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/keystore/"* "${FILE_PATH}/peers/peer0.${ORG_NAME,,}.${DOMAIN_NAME}.com/tls/server.key"

  infoln "Generating the user MSP"
  # set -x
  for (( i=0; i<USER_NUMBER; i++ ))
  do
    fabric-ca-client enroll -u https://${REGISTER_USER_ID[$i]}:${REGISTER_USER_PW[$i]}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${USERS_PATH[$i]}/msp" --tls.certfiles "${ORG_PATH}/ca-cert.pem"
    cp "${FILE_PATH}/msp/config.yaml" "${USERS_PATH[$i]}/msp/config.yaml"
  done
  # { set +x; } 2>/dev/null

  infoln "Generating admin MSP"
  # set -x
  fabric-ca-client enroll -u https://${REGISTER_ADMIN_ID}:${REGISTER_ADMIN_PW}@localhost:${FABRIC_CA_SERVER_PORT} --caname ${CA_NAME} -M "${ADMIN_PATH}/msp" --tls.certfiles "${ORG_PATH}/ca-cert.pem"
  # { set +x; } 2>/dev/null

  cp "${FILE_PATH}/msp/config.yaml" "${ADMIN_PATH}/msp/config.yaml"
}
